<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Docs Planet</title>
    <link>/tutorials/git/</link>
    <description>Recent content in Git on Docs Planet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tutorials/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tutorial - Git Básico</title>
      <link>/tutorials/git/git-basico/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/git-basico/</guid>
      <description>Intro Nesse tutorial, vamos fazer operações básicas relacionadas ao Git. como initializar um repositório, adicionar arquivos, comittar as mudanças, depois modificar os arquivos, adicionar os arquivos modificados, comittar tudo de novo, e por fim algumas noções básicas relacionadas a branch e merges.
Prerequisitos  Ter o git instalado, senão rodar: sudo apt-get install git Instalar git-bash-prompt seguindo este tutorial Ter uma estacao de trabalho Linux  1. Inicializando o repositorio Crie uma pasta chamada tutorial-git.</description>
    </item>
    
    <item>
      <title>Git Bash Prompt</title>
      <link>/tutorials/git/git-bash-prompt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/git-bash-prompt/</guid>
      <description>Intro Para ter uma melhor visibilidade do que passa em nossos projetos que estão versionados quando estamos trabalhando de forma local, podemos usar ferramentas como é o caso de git-bash-prompt
Instalação Baixar o repositorio contendo o software
cd ~ git clone https://github.com/jenciso/bash-git-prompt.git .bash-git-prompt --depth=1 Adicionar algumas linhas dentro do arquivo .bashrc
GIT_PROMPT_ONLY_IN_REPO=0 GIT_PROMPT_THEME=Single_line_Minimalist source ~/.bash-git-prompt/gitprompt.sh    Testando Baixar qualquer repositorio git. Ex: https://github.com/jenciso/node-express-azure e fazemos uma simples modificação</description>
    </item>
    
    <item>
      <title>Git (Parte 1)</title>
      <link>/tutorials/git/git-part1/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/git-part1/</guid>
      <description>Este tutorial esta baseado do seguinte documento: https://githowto.com
 1. Prerequisitos  Instalar git-bash-prompt seguindo este tutorial Ter uma estacao de trabalho Linux  2. Preparação Configurando nome e endereço de e-mail
git config --global user.name &amp;#34;Seu Nome Completo&amp;#34; git config --global user.email &amp;#34;seu_email@sua_empresa.com&amp;#34; Opções de Instalação: términos de linhas (Linux):
git config --global core.autocrlf input git config --global core.safecrlf warn   3. Criando o projeto git Vamos a criar um repositório git &amp;ldquo;hello&amp;rdquo; e uma página hello.</description>
    </item>
    
    <item>
      <title>Git (Parte 2)</title>
      <link>/tutorials/git/git-part2/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/git-part2/</guid>
      <description>Este tutorial é a continuação do tutorial Git (Part 1)
 14. Descartando mudanças locais (antes do stage) Acessando o branch Master Verifique que você esta no último commit do branch master antes de continuar.
git checkout master Mude o hello.html Acontece de você modificar o arquivo no seu diretório de trabalho local e às vezes querer descartar as mudanças que você fez commit. É aqui que o comando checkout vai te ajudar.</description>
    </item>
    
    <item>
      <title>Git (Parte 3)</title>
      <link>/tutorials/git/git-part3/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/git-part3/</guid>
      <description>Este tutorial é a continuação do tutorial Git (Part 2)
 24. Criando um Branch Vamos nomear o nosso novo branch como «style».
git checkout -b style git status Nota:
 git checkout -b &amp;lt;branch name&amp;gt; é o atalho de git branch &amp;lt;branch name&amp;gt; seguido por git checkout &amp;lt;branch name&amp;gt; Note que o comando git status avisa que você está no branch style.  Adicione o arquivo style.css touch lib/style.</description>
    </item>
    
    <item>
      <title>Gitflow</title>
      <link>/tutorials/git/gitflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/gitflow/</guid>
      <description>Intro Gitflow é um modelo de organização de branches criado por Vincent Driessen, Não é o único modelo de organização de branches, mas sem dúvida é um dos mais usados.
Nomenclatura Gitflow estabelece algumas regras de nomenclaturas para tipos de branches enquanto, ao mesmo tempo, define o que cada tipo de branch faz. Para referência, segue uma lista dos tipos de branches definidos pelo Git Flow e suas respectivas descrições:</description>
    </item>
    
  </channel>
</rss>
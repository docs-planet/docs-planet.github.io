<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs Planet</title>
    <link>/</link>
    <description>Recent content on Docs Planet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tutorial - Git Básico</title>
      <link>/tutorials/git/git-basico/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/git-basico/</guid>
      <description>Intro Nesse tutorial, vamos fazer operações básicas relacionadas ao Git. como initializar um repositório, adicionar arquivos, comittar as mudanças, depois modificar os arquivos, adicionar os arquivos modificados, comittar tudo de novo, e por fim algumas noções básicas relacionadas a branch e merges.
Prerequisitos  Ter o git instalado, senão rodar: sudo apt-get install git Instalar git-bash-prompt seguindo este tutorial Ter uma estacao de trabalho Linux  1. Inicializando o repositorio Crie uma pasta chamada tutorial-git.</description>
    </item>
    
    <item>
      <title>Docker - Instalacão</title>
      <link>/tutorials/docker/docker-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/docker/docker-install/</guid>
      <description>Requisitos  Ubuntu Linux 18.04 ou superior  Procedimento Apagando versões anteriores
sudo apt-get remove docker docker-engine docker.io containerd runc Instalando os prerequisitos
sudo apt-get update sudo apt-get install \  apt-transport-https \  ca-certificates \  curl \  gnupg-agent \  software-properties-common Adicionando o repositório
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \  &amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs)\ stable&amp;#34; Instalando docker:
sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.</description>
    </item>
    
    <item>
      <title>Git Bash Prompt</title>
      <link>/tutorials/git/git-bash-prompt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/git-bash-prompt/</guid>
      <description>Intro Para ter uma melhor visibilidade do que passa em nossos projetos que estão versionados quando estamos trabalhando de forma local, podemos usar ferramentas como é o caso de git-bash-prompt
Instalação Baixar o repositorio contendo o software
cd ~ git clone https://github.com/jenciso/bash-git-prompt.git .bash-git-prompt --depth=1 Adicionar algumas linhas dentro do arquivo .bashrc
GIT_PROMPT_ONLY_IN_REPO=0 GIT_PROMPT_THEME=Single_line_Minimalist source ~/.bash-git-prompt/gitprompt.sh    Testando Baixar qualquer repositorio git. Ex: https://github.com/jenciso/node-express-azure e fazemos uma simples modificação</description>
    </item>
    
    <item>
      <title>KVM - Instalacão</title>
      <link>/tutorials/kvm/kvm-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/kvm/kvm-install/</guid>
      <description>Requisitos  Ubuntu Linux 18.04 ou superior  Procedimento Passo 1: Verificar Verificar se nosso sistema suporta hardware virtualization
egrep -c &#39;(vmx|svm)&#39; /proc/cpuinfo  Se a saida é maior que zero, nosso sistema suporta virtualização. Esta tudo ok.
 Agora instalar kvm-ok para saber se o servidor pode rodar hardware accelerated KVM
sudo apt install cpu-checker sudo kvm-ok   Passo 2: Instalar KVM sudo apt update sudo apt install qemu qemu-kvm libvirt-bin bridge-utils virt-manager   Passo 3: Start &amp;amp; enable libvirtd service sudo service libvirtd start sudo update-rc.</description>
    </item>
    
    <item>
      <title>Git (Parte 1)</title>
      <link>/tutorials/git/git-part1/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/git-part1/</guid>
      <description>Este tutorial esta baseado do seguinte documento: https://githowto.com
 1. Prerequisitos  Instalar git-bash-prompt seguindo este tutorial Ter uma estacao de trabalho Linux  2. Preparação Configurando nome e endereço de e-mail
git config --global user.name &amp;#34;Seu Nome Completo&amp;#34; git config --global user.email &amp;#34;seu_email@sua_empresa.com&amp;#34; Opções de Instalação: términos de linhas (Linux):
git config --global core.autocrlf input git config --global core.safecrlf warn   3. Criando o projeto git Vamos a criar um repositório git &amp;ldquo;hello&amp;rdquo; e uma página hello.</description>
    </item>
    
    <item>
      <title>Git (Parte 2)</title>
      <link>/tutorials/git/git-part2/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/git-part2/</guid>
      <description>Este tutorial é a continuação do tutorial Git (Part 1)
 14. Descartando mudanças locais (antes do stage) Acessando o branch Master Verifique que você esta no último commit do branch master antes de continuar.
git checkout master Mude o hello.html Acontece de você modificar o arquivo no seu diretório de trabalho local e às vezes querer descartar as mudanças que você fez commit. É aqui que o comando checkout vai te ajudar.</description>
    </item>
    
    <item>
      <title>Git (Parte 3)</title>
      <link>/tutorials/git/git-part3/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/git-part3/</guid>
      <description>Este tutorial é a continuação do tutorial Git (Part 2)
 24. Criando um Branch Vamos nomear o nosso novo branch como «style».
git checkout -b style git status Nota:
 git checkout -b &amp;lt;branch name&amp;gt; é o atalho de git branch &amp;lt;branch name&amp;gt; seguido por git checkout &amp;lt;branch name&amp;gt; Note que o comando git status avisa que você está no branch style.  Adicione o arquivo style.css touch lib/style.</description>
    </item>
    
    <item>
      <title>Configurações iniciais</title>
      <link>/artigos/init-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/artigos/init-config/</guid>
      <description>Configuração de Sudoers Use sudo sem precisar digitar a senha
echo &amp;quot;`whoami` ALL=(ALL) NOPASSWD:ALL&amp;quot; | sudo tee /etc/sudoers.d/admins Criando par de chaves ssh ssh-keygen   </description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/credits/</guid>
      <description>Contribuidores Juan Enciso @jenciso
Mateus Abdala @MateusAbdala
 </description>
    </item>
    
    <item>
      <title>Gitflow</title>
      <link>/tutorials/git/gitflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/gitflow/</guid>
      <description>Intro Gitflow é um modelo de organização de branches criado por Vincent Driessen, Não é o único modelo de organização de branches, mas sem dúvida é um dos mais usados.
Nomenclatura Gitflow estabelece algumas regras de nomenclaturas para tipos de branches enquanto, ao mesmo tempo, define o que cada tipo de branch faz. Para referência, segue uma lista dos tipos de branches definidos pelo Git Flow e suas respectivas descrições:</description>
    </item>
    
    <item>
      <title>KVM - Bridge Setup</title>
      <link>/tutorials/kvm/kvm-bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/kvm/kvm-bridge/</guid>
      <description>Requisitos  KVM instalado Ter uma interfaz de rede ethernet (não wireless) Ubuntu 18.04 ou superior  Procedimento Verificando qual é o nome da minha interfaz de rede
nmcli device status  Observer o resultado da columna DEVICE
 Com esse dado configuramos via netplan a configuração bridge adicionando um arquivo yaml.
sudo vi /etc/netplan/50-cloud-init.yaml Copiar um conteúdo similar. No me caso o DEVICE da minha NIC é enp2s0:
network: version: 2 ethernets: enp2s0:  dhcp4: yes dhcp6: no bridges: br0: interfaces: [enp2s0]  dhcp4: yes dhcp6: no Logo aplicamos os cambios:</description>
    </item>
    
    <item>
      <title>KVM - Provision</title>
      <link>/tutorials/kvm/kvm-provision/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/kvm/kvm-provision/</guid>
      <description>Requisitos  KVM instalado Ubuntu 18.04 ou superior Usar uma conta com privilegios de root (sudo)  Instalação cd ~ git clone https://github.com/jenciso/kvm-provision Preparação Precisamos baixar uma imagem base para poder usar na criacação de VM&amp;rsquo;s. Usaremos a image Centos 7 ja preperada para trabalhar com cloud-init. Colocaremos esta imagem na pasta boot do libvirt. Execute o seguinte comando:
sudo curl -fSL -C - http://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2 \  -o /var/lib/libvirt/boot/CentOS-7-x86_64-GenericCloud.qcow2 Para poder executar alguns comandos do kvm, precisamos adicionar nosso usuario ao grupo libvirt, e para que os cambios sejam efetivados temos q sair da sessao e volver ingressar</description>
    </item>
    
    <item>
      <title>Semantic Version</title>
      <link>/artigos/semversion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/artigos/semversion/</guid>
      <description>Intro O versionamento semântico hoje é um dos padrões de versionamento mais usados e conhecidos.
Tem o objetivo de evitar que atualizações de dependência quebrem o seu software indevidamente, enquanto permitindo que você tenha uma noção do status de estabilidade do software (se é &amp;ldquo;seguro&amp;rdquo; usar em produção, por exemplo) e possa identificar se uma nova versão possui apenas novos recursos ou se possui apenas correções de bugs, por exemplo.</description>
    </item>
    
  </channel>
</rss>
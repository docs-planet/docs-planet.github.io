<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs Planet</title>
    <link>/</link>
    <description>Recent content on Docs Planet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git Bash Prompt</title>
      <link>/tutorials/git/git-bash-prompt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/git-bash-prompt/</guid>
      <description>Intro Para ter uma melhor visibilidade do que passa em nossos projetos que estão versionados quando estamos trabalhando de forma local, podemos usar ferramentas como é o caso de git-bash-prompt
Instalação Baixar o repositorio contendo o software
cd ~ git clone https://github.com/jenciso/bash-git-prompt.git .bash-git-prompt --depth=1 Adicionar algumas linhas dentro do arquivo .bashrc
GIT_PROMPT_ONLY_IN_REPO=0 GIT_PROMPT_THEME=Single_line_Minimalist source ~/.bash-git-prompt/gitprompt.sh    Testando Baixar qualquer repositorio git. Ex: https://github.com/jenciso/node-express-azure e fazemos uma simples modificação</description>
    </item>
    
    <item>
      <title>KVM - Instalacão</title>
      <link>/tutorials/kvm/kvm-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/kvm/kvm-install/</guid>
      <description>Requisitos  Ubuntu Linux 18.04 ou superior  Procedimento Passo 1: Verificar Verificar se nosso sistema suporta hardware virtualization
egrep -c &#39;(vmx|svm)&#39; /proc/cpuinfo  Se a saida é maior que zero, nosso sistema suporta virtualização. Esta tudo ok.
 Agora instalar kvm-ok para saber se o servidor pode rodar hardware accelerated KVM
sudo apt install cpu-checker sudo kvm-ok   Passo 2: Instalar KVM sudo apt update sudo apt install qemu qemu-kvm libvirt-bin bridge-utils virt-manager   Passo 3: Start &amp;amp; enable libvirtd service sudo service libvirtd start sudo update-rc.</description>
    </item>
    
    <item>
      <title>Git (Parte 1)</title>
      <link>/tutorials/git/git-part1/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/git-part1/</guid>
      <description>Este tutorial esta baseado do seguinte documento: https://githowto.com
 1. Prerequisitos  Instalar git-bash-prompt seguindo este tutorial Ter uma estacao de trabalho Linux  2. Preparação Configurando nome e endereço de e-mail
git config --global user.name &amp;#34;Seu Nome Completo&amp;#34; git config --global user.email &amp;#34;seu_email@sua_empresa.com&amp;#34; Opções de Instalação: términos de linhas (Linux):
git config --global core.autocrlf input git config --global core.safecrlf warn   3. Criando o projeto git Vamos a criar um repositório git &amp;ldquo;hello&amp;rdquo; e uma página hello.</description>
    </item>
    
    <item>
      <title>Git (Parte 2)</title>
      <link>/tutorials/git/git-part2/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/git-part2/</guid>
      <description>Este tutorial é a continuação do tutorial Git (Part 1)
 14. Descartando mudanças locais (antes do stage) Acessando o branch Master Verifique que você esta no último commit do branch master antes de continuar.
git checkout master Mude o hello.html Acontece de você modificar o arquivo no seu diretório de trabalho local e às vezes querer descartar as mudanças que você fez commit. É aqui que o comando checkout vai te ajudar.</description>
    </item>
    
    <item>
      <title>Git (Parte 3)</title>
      <link>/tutorials/git/git-part3/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/git-part3/</guid>
      <description>Este tutorial é a continuação do tutorial Git (Part 2)
 24. Criando um Branch Vamos nomear o nosso novo branch como «style».
git checkout -b style git status Nota:
 git checkout -b &amp;lt;branch name&amp;gt; é o atalho de git branch &amp;lt;branch name&amp;gt; seguido por git checkout &amp;lt;branch name&amp;gt; Note que o comando git status avisa que você está no branch style.  Adicione o arquivo style.css touch lib/style.</description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/credits/</guid>
      <description>Contribuidores Juan Enciso @jenciso
Mateus Abdala @MateusAbdala
 </description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>/artigos/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/artigos/docker/</guid>
      <description>Docker Tutoriais  https://www.docker.com/101-tutorial https://docker-curriculum.com/ https://www.ionos.es/digitalguide/servidores/configuracion/tutorial-docker-instalacion-y-primeros-pasos/  </description>
    </item>
    
    <item>
      <title>Git</title>
      <link>/artigos/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/artigos/git/</guid>
      <description>Git Artigos  https://www.hostinger.com.br/tutoriais/git-branch/ https://www.xpertup.com/blog/technology/git-and-github-fundamentals/ https://dev.to/usmslm102/git-cheat-sheet-4f5a  Git Tutoriais  https://www.atlassian.com/git/tutorials https://try.github.io/ https://www.vogella.com/tutorials/Git/article.html  Git Merge  https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1  Gitflow  https://medium.com/@olivier.bossel/git-flow-the-right-way-to-go-f2a65c315818  </description>
    </item>
    
    <item>
      <title>Gitflow</title>
      <link>/tutorials/git/gitflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/git/gitflow/</guid>
      <description>Intro Gitflow &amp;hellip;</description>
    </item>
    
    <item>
      <title>KVM - Bridge Setup</title>
      <link>/tutorials/kvm/kvm-bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/kvm/kvm-bridge/</guid>
      <description>Requisitos  KVM instalado Ter uma interfaz de rede ethernet (não wireless) Ubuntu 18.04 ou superior  Procedimento Verificando qual é o nome da minha interfaz de rede
nmcli device status  Observer o resultado da columna DEVICE
 Com esse dado configuramos via netplan a configuração bridge adicionando um arquivo yaml.
sudo vi /etc/netplan/50-cloud-init.yaml Copiar um conteúdo similar. No me caso o DEVICE da minha NIC é enp2s0:
network: version: 2 ethernets: enp2s0:  dhcp4: yes dhcp6: no bridges: br0: interfaces: [enp2s0]  dhcp4: yes dhcp6: no Logo aplicamos os cambios:</description>
    </item>
    
    <item>
      <title>KVM - Provision</title>
      <link>/tutorials/kvm/kvm-provision/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/kvm/kvm-provision/</guid>
      <description>Requisitos  KVM instalado Ubuntu 18.04 ou superior  Procedimento Referencias  http://blog.programster.org/kvm-creating-thinly-provisioned-guests  </description>
    </item>
    
    <item>
      <title>Varios</title>
      <link>/artigos/cors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/artigos/cors/</guid>
      <description>CORS  https://dev.to/lydiahallie/cs-visualized-cors-5b8h  </description>
    </item>
    
  </channel>
</rss>
[
{
	"uri": "/tutorials/git/",
	"title": "Git",
	"tags": ["azure"],
	"description": "Conteudo relacionado a Git",
	"content": "GIT - Controle de Vers√£o "
},
{
	"uri": "/tutorials/git/git-bash-prompt/",
	"title": "Git Bash Prompt",
	"tags": ["git", "bash"],
	"description": "Instalando um git-bash-prompt para melhorar nossa visibilidade no git",
	"content": "Intro Para ter uma melhor visibilidade do que passa em nossos projetos que est√£o versionados quando estamos trabalhando de forma local, podemos usar ferramentas como √© o caso de git-bash-prompt\nInstala√ß√£o Baixar o repositorio contendo o software\ncd ~ git clone https://github.com/jenciso/bash-git-prompt.git .bash-git-prompt --depth=1 Adicionar algumas linhas dentro do arquivo .bashrc\nGIT_PROMPT_ONLY_IN_REPO=0 GIT_PROMPT_THEME=Single_line_Minimalist source ~/.bash-git-prompt/gitprompt.sh    Testando Baixar qualquer repositorio git. Ex: https://github.com/jenciso/node-express-azure e fazemos uma simples modifica√ß√£o\ngit clone https://github.com/jenciso/node-express-azure cd node-express-azure rm README.md Agora podemos ver que estamos na branch master e o shell nos indica que temos um cambio em nosso repositorio.\n   "
},
{
	"uri": "/tutorials/",
	"title": "üíª Tutoriais",
	"tags": ["Tutoriais"],
	"description": "Tutoriais diversos",
	"content": ""
},
{
	"uri": "/tutorials/git/git-part1/",
	"title": "Git (Parte 1)",
	"tags": ["git"],
	"description": "Tutorial de GIT",
	"content": " Este tutorial esta baseado do seguinte documento: https://githowto.com\n 1. Prerequisitos  Instalar git-bash-prompt seguindo este tutorial Ter uma estacao de trabalho Linux  2. Prepara√ß√£o Configurando nome e endere√ßo de e-mail\ngit config --global user.name \u0026#34;Seu Nome Completo\u0026#34; git config --global user.email \u0026#34;seu_email@sua_empresa.com\u0026#34; Op√ß√µes de Instala√ß√£o: t√©rminos de linhas (Linux):\ngit config --global core.autocrlf input git config --global core.safecrlf warn   3. Criando o projeto git Vamos a criar um reposit√≥rio git \u0026ldquo;hello\u0026rdquo; e uma p√°gina hello.html com o seguinte conte√∫do: \u0026ldquo;Hello, World\u0026rdquo;\nCrie uma p√°gina de \u0026ldquo;Hello, World\u0026rdquo; e inicialize o reposit√≥rio\nmkdir hello \u0026amp;\u0026amp; cd hello echo \u0026#34;Hello, World\u0026#34; \u0026gt; hello.html git init Adicione a p√°gina ao reposit√≥rio:\ngit add hello.html git commit -m \u0026#34;First Commit\u0026#34;   4. Conferindo o status do reposit√≥rio Use o comando git status para checar o estado atual do reposit√≥rio.\ngit status   5. Fazendo modifica√ß√µes Modificar a p√°gina hello.html com o seguinte conte√∫do:\n\u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; Conferindo o status:\ngit status   Notar que:\n O git sabe que o arquivo hello.html foi modificado, mas essas modifica√ß√µes ainda n√£o sofreram commit para o reposit√≥rio. A mensagem de status oferece dicas sobre o que fazer em seguida. Se voc√™ quiser adicionar essas modifica√ß√µes para o reposit√≥rio, use git add. Para desfazer as modifica√ß√µes use git checkout.  6. Adicionando modifica√ß√µes ao stage Mande o git adicionar as modifica√ß√µes ao stage. Confira o status\ngit add hello.html git status   Observar:\n Modifica√ß√µes no hello.html foram adicionadas ao stage. Isso quer dizer que o git sabe da modifica√ß√£o, mas n√£o √© permanente no reposit√≥rio. O pr√≥ximo commit incluir√° as modifica√ß√µes que est√£o no stage. Se voc√™ decidir n√£o fazer commit da modifica√ß√£o, o comando status vai te lembrar que voc√™ pode usar o comando git reset para remover essas mudan√ßas do stage.  7. Colocando em stage e fazendo commits Adicionar algo ao stage no git permite que voc√™ continue fazendo modifica√ß√µes no seu diret√≥rio de trabalho e, quando decidir que quer interagir com o controle de vers√£o, permite que guarde as mudan√ßas em pequenos commits.\nPense que voc√™ editou tr√™s arquivos (a. html, b. html e c. html). Depois disso voc√™ tem que fazer commit de todas as modifica√ß√µes para que as mudan√ßas em a.html e b.html sejam um √∫nico commit, enquanto as mudan√ßas em c.html, que n√£o s√£o l√≥gicamente relacionadas com as duas outras mudan√ßas nos outros dois arquivos, sejam enviadas em um commit diferente.\nEm teoria, voc√™ pode fazer o seguinte:\ngit add a.html git add b.html git commit -m \u0026#34;Changes for a and b\u0026#34; git add c.html git commit -m \u0026#34;Unrelated change to c\u0026#34; Separando a adi√ß√£o ao stage e o commit, voc√™ pode customizar o que vai em cada commit.\n8. Fazendo commit das modifica√ß√µes Na hora de executar o comando git commit vamos omitor o uso do flag -m, desta forma entramos na edi√ß√£o interativa de coment√°rios para o commit. O git ira abrir o editor configurado a partir desta lista (em ordem de prioridade)\n Vari√°vel de ambiente GIT_EDITOR Defini√ß√£o de configura√ß√£o core.editor Vari√°vel de ambiente VISUAL Vari√°vel de ambiente EDITOR  No me caso meu editor √© \u0026lsquo;vi\u0026rsquo;. Caso deseje modificar seu editor de forma permanente, edite o arquivo ~/.gitconfig\nLogo de executar o commit, iremos colocar como comentario \u0026ldquo;Added h1 tag\u0026rdquo;\n  9. Modifica√ß√µes, n√£o arquivos O git trabalha com as modifica√ß√µes, n√£o com os arquivos.\n Primeira mudan√ßa: Adicionando tags padr√£o de p√°ginas e executando git add hello.html. O novo conte√∫do para o arquivo: hello.html ser√°:  \u0026lt;html\u0026gt; \u0026lt;body\u0026gt;  \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; git add hello.html  Segunda mudan√ßa: Adicione os headers do HTML. Agora adicione os headers ( section) na p√°gina  \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt;  \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Agora excute:\ngit status   Note que o arquivo hello.html est√° listado duas vezes no status.\n A primeira mudan√ßa (a adi√ß√£o das tags padr√£o) est√° no stage e pronta para um commit. A segunda mudan√ßa (adi√ß√£o dos headers) n√£o est√° no stage.  Se voc√™ fizesse um commit agora, os headers n√£o teriam sido salvos no reposit√≥rio.\n Commit: Fa√ßa um commit das mudan√ßas que est√£o no stage (as tags padr√£o) e ent√£o confira novamente o status.  git commit -m \u0026#34;Added standard HTML page tags\u0026#34; git status   O comando status diz que o arquivo hello.html tem modifica√ß√µes n√£o gravadas, mas n√£o est√° mais em buffer.\n Adicionando a segunda modifica√ß√£o: Adicione a segunda modifica√ß√£o ao stage, depois execute o comando git status  git add . git status git commit -m \u0026#34;Added HTML header\u0026#34;   10. Hist√≥rico Usaremos o comando git log\ngit log   Hist√≥rico em uma linha:\ngit log --pretty=oneline Controlando a exibi√ß√£o de entradas\ngit log --pretty=oneline --max-count=2 git log --pretty=oneline --since='5 minutes ago' git log --pretty=oneline --until='5 minutes ago' git log --pretty=oneline --author=\u0026lt;your name\u0026gt; git log --pretty=oneline --all Para rever as modifica√ß√µes feitas na √∫ltima semana\ngit log --all --pretty=format:\u0026quot;%h %cd %s (%an)\u0026quot; --since='7 days ago' Um formato bacana\ngit log --pretty=format:\u0026quot;%h %ad | %s%d [%an]\u0026quot; --graph --date=short   Vamos olhar os detalhes:\n \u0026ndash;pretty=\u0026rdquo;\u0026hellip;\u0026rdquo; define o formato da sa√≠da %h √© o hash abreviado do commit %d mostra decora√ß√µes do commit (ex.: head de branches ou tags) %ad √© a data do commit %s √© o coment√°rio %an √© o nome do autor = \u0026ndash;graph fala para o git mostrar a √°rvore de commits no formato de um gr√°fico de ASCII \u0026ndash;date=short mant√©m o formato de data pequeno e simples  Ent√£o, toda vez que voc√™ quiser ver um log, voc√™ ter√° que digitar muito. Felizmente, n√≥s aprenderemos sobre aliases na pr√≥xima li√ß√£o.\n11. Aliases Adicione as seguintes linhas no arquivo ~/.gitconfig\n[alias] co = checkout ci = commit st = status br = branch hist = log --pretty=format:\\\u0026quot;%h %ad | %s%d [%an]\\\u0026quot; --graph --date=short type = cat-file -t dump = cat-file -p Agora execute:\ngit st git hist   12. Usando vers√µes anteriores Conseguindo os hashes das vers√µes anteriores git hist O resultado ser√°:\n  Confira a data do log e encontre o hash do primeiro commit. Voc√™ vai achar ele na √∫ltima linha do git hist Use o c√≥digo (os seus 7 primeiros caracteres s√£o suficientes) no comando abaixo. Depois disso, cheque o conte√∫do do arquivo hello.html.\ngit checkout \u0026lt;hash\u0026gt; cat hello.html   Voltando para a vers√£o mais atual no branch master git checkout master cat hello.html   ‚Äòmaster‚Äô √© o nome do branch padr√£o. Ao entrar em um branch pelo seu nome, voc√™ vai para a sua vers√£o mais atual.\n13. Adicionando tags a vers√µes Vamos chamar a vers√£o atual do nosso programa \u0026ldquo;Hello\u0026rdquo; de vers√£o 1 (v1).\nCriando a tag do primeiro git tag v1 Tags em vers√µes antigas Vamos adicionar uma tag √† vers√£o anterior da nossa atual vers√£o com o nome v1-beta. N√≥s vamos usar a nota√ß√£o ^ indicando ‚Äúo pai de v1‚Äù. Se a nota√ß√£o v1^ gera problemas, tente usar v1~1 para referenciar a mesma vers√£o. Essa nota√ß√£o significa ‚Äúa primeira vers√£o antes de v1‚Äù.\ngit checkout v1^ cat hello.html   Essa √© a vers√£o com as tags \u0026lt;html\u0026gt; e \u0026lt;body\u0026gt;, mas sem \u0026lt;head\u0026gt;. Vamos fazer dessa a vers√£o v1-beta.\ngit tag v1-beta Acessando atrav√©s do nome da tag git checkout v1 git checkout v1-beta   Vendo tags com o comando tag git tag Vendo tags nos logs git hist master --all   Voc√™ pode ver as tags (v1 e v1-beta) listadas no log juntamente com o nome do branch (master). O HEAD mostra o commit em que voc√™ est√° atualmente (v1-beta).\n"
},
{
	"uri": "/tutorials/git/git-part2/",
	"title": "Git (Parte 2)",
	"tags": ["git"],
	"description": "Tutorial de GIT",
	"content": " Este tutorial √© a continua√ß√£o do tutorial Git (Part 1)\n 14. Descartando mudan√ßas locais (antes do stage) Acessando o branch Master Verifique que voc√™ esta no √∫ltimo commit do branch master antes de continuar.\ngit checkout master Mude o hello.html Acontece de voc√™ modificar o arquivo no seu diret√≥rio de trabalho local e √†s vezes querer descartar as mudan√ßas que voc√™ fez commit. √â aqui que o comando checkout vai te ajudar.\nFa√ßa mudan√ßas ao arquivo hello.html na forma de um coment√°rio indesejado.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;!-- This is a bad comment. We want to revert it. --\u0026gt;  \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Confira o status\ngit status   Desfazendo as mudan√ßas no diret√≥rio de trabalho cat hello.html git checkout hello.html git status cat hello.html   O comando status mostra que n√£o existem mudan√ßas que n√£o est√£o no stage no reposit√≥rio de trabalho. E o ‚Äúcoment√°rio ruim‚Äù n√£o est√° mais no arquivo.\n15. Descartando mudan√ßas no stage (antes do commit) Edite o arquivo e adicione as mudan√ßas ao stage Fa√ßa mudan√ßas ao arquivo hello.html na forma de um coment√°rio indesejado.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This is an unwanted but staged comment --\u0026gt;  \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; E logo adicione o arquivo ao stage.\ngit add hello.html git status   Revertendo a zona de buffer Felizmente, o status informado nos mostra exatamente o que devemos fazer para cancelar mudan√ßas no stage.\ngit reset HEAD hello.html   O comando reset retorna a zona do buffer para HEAD. Isso limpa a zona do buffer das mudan√ßas que n√≥s acabamos de adicionar ao stage.\nO comando reset (padr√£o) n√£o altera o diret√≥rio de trabalho. Logo, o diret√≥rio de trabalho ainda tem os coment√°rios indesejados. N√≥s podemos usar o comando checkout do tutorial anterior para remover as mudan√ßas do reposit√≥rio de trabalho.\nMudando para a vers√£o do commit git checkout hello.html git status   Nosso diret√≥rio de trabalho est√° limpo novamente.\n16. Desfazendo commits Algumas vezes voc√™ percebe que os novos commits est√£o errados e voc√™ quer desfaz√™-los. Existem v√°rias maneiras de resolver esse problema, mas n√≥s usamos a mais segura aqui.\nPara desfazer o commit, vamos criar um novo commit desfazendo as modifica√ß√µes n√£o desejadas.\nEdite o arquivo e fa√ßa um commit Substitua o arquivo hello.html com o seguinte.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;!-- This is an unwanted but committed change --\u0026gt;  \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; git add hello.html git commit -m \u0026quot;Oops, we didn't want this commit\u0026quot; Fa√ßa um commit com as novas modifica√ß√µes que desfazem as modifica√ß√µes anteriores Para desfazer o commit, precisamos criar um commit que deleta as modifica√ß√µes feitas pelo commit indesejado.\ngit revert HEAD   Voce tb poderia haver usado o comando git revert HEAD --no-edit. O comando --no-edit pode ser ignorado. Ele era desnecess√°rio para gerar as informa√ß√µes de sa√≠da sem abrir o editor.\nConfira o log git hist   A seguir vamos olhar a t√©cnica que pode ser usada para remover o √∫ltimo commit do hist√≥rico do reposit√≥rio.\n17. Removendo um commit de um branch Revert √© um comando poderoso da se√ß√£o anterior que te permite cancelar quaisquer commits para um reposit√≥rio. Apesar disso, tanto os commits originais quanto os cancelados permanecem vis√≠veis no hist√≥rico do branch (quando usamos o comando git log).\nFrequentemente depois que um commit √© feito percebemos que ele era um erro. Seria legal ter um comando de desfazer que permitisse deletar o commit incorreto imediatamente. Esse comando preveniria a apari√ß√£o de um commit indesejado no hist√≥rico do git log.\nO comando reset N√≥s j√° usamos o comando reset para equiparar o buffer zone e o commit selecionado (commit HEAD foi usado na li√ß√£o anterior).\nQuando uma refer√™ncia a um commit √© dada (Exemplo: um branch, hash, ou tag name), o comando reset vai\u0026hellip;\n Sobrescrever o branch atual para que ele aponte para o commit correto Opcionalmente resetar o buffer zone para que ele satisfazer o commit especificado Opcionalmente resetar o dir√©torio de trabalho para que ele equipare-se ao commit especificado  Cheque nosso hist√≥rico git hist   N√≥s vemos que os dois √∫ltimos commits desse branch s√£o \u0026ldquo;Oops\u0026rdquo; and \u0026ldquo;Revert Oops\u0026rdquo;. Vamos remov√™-los com o comando reset.\nMarque esse branch primeiro Vamos marcar nosso √∫ltimo commit com tag, para que possamos ach√°-lo ap√≥s remover commits.\ngit tag oops Resete o commit para o Oops anterior No log de hist√≥rico (veja acima), o commit com tag ¬´v1¬ª est√° fazendo commit sobre um commit anterior incorreto. Vamos resetar o branch para aquele ponto. Como o branch tem uma tag, podemos usar o nome da tag no comando reset (se n√£o possuir uma tag, podemos usar o valor hash).\ngit reset --hard v1 git hist   Nada √© perdido para sempre O que acontece com os commits errados? Eles ainda est√£o no reposit√≥rio. Na verdade, ainda podemos nos referir a eles. No in√≠cio da li√ß√£o, criamos a tag ¬´oops¬ª para o commit cancelado. Vamos dar uma olhada em all (todos) commits.\ngit hist --all   Podemos ver que os commits errados n√£o foram embora. Eles n√£o est√£o listados mais no branch master mas ainda permanecem no reposit√≥rio. Eles ainda estariam no reposit√≥rio caso n√£o tiv√©ssemos colocado uma tag neles, mas s√≥ poder√≠amos referenci√°-los por seus nomes hash. Commits n√£o referenciados continuam no reposit√≥rio at√© que um software garbage collection √© acionado pelo sistema.\nPerigos de resetar Resets em branches locais geralmente s√£o inofensivos. As consequ√™ncias de quaisquer \u0026ldquo;acidentes\u0026rdquo; podem ser revertidos usando um commit apropriado.\nApesar disso, outros usu√°rios que compartilham o branch podem ficar confusos se o branch compartilhado fica armazenado em reposit√≥rios remotos.\n18. Removendo a tag oops A tag oops j√° fez o seu trabalho. Vamos remov√™-la e permitir que o garbage collector delete o commit referenciado.\ngit tag -d oops git hist --all   19. Mudando commits Mude a p√°gina e fa√ßa um commit Coloque um coment√°rio de autor na p√°gina.\n\u0026lt;!-- Author: Juan Enciso --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; git add hello.html git commit -m \u0026quot;Add an author comment\u0026quot; Oops\u0026hellip; precisa do e-mail Depois de fazer o commit, voc√™ percebe que todo bom coment√°rio deveria incluir o e-mail do autor. Edite a p√°gina hello para fornecer um e-mail.\n\u0026lt;!-- Author: Juan Enciso (juan.enciso@gmail.com) --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Mude o commit anterior N√≥s n√£o queremos criar outro commit apenas para o e-mail. Vamos mudar o commit anterior e adicionar o endere√ßo de e-mail.\ngit add hello.html git commit --amend -m \u0026quot;Add an author/email comment\u0026quot;   Olhar o hist√≥rico git hist   O novo commit \u0026ldquo;author/email\u0026rdquo; substitui o commit original \u0026ldquo;author\u0026rdquo;. O mesmo pode ser obtido usando o comando reset no branch e fazendo novamente o commit com as mudan√ßas.\n20. Movendo arquivos Mova o arquivo hello.html para a pasta lib. Agora criaremos a estrutura do nosso reposit√≥rio. Vamos mover a p√°gina no diret√≥rio lib\nmkdir lib git mv hello.html lib git status Movendo arquivos com git, n√≥s notificamos o git sobre duas coisas\n O arquivo hello.html foi deletado. O arquivo lib/hello.html foi criado.  Ambos os fatos v√£o para stage imediatamente e ficam prontos para o commit. O comando git status reporta que o arquivo foi movido.\nMais um jeito de mover arquivos Um fato positivo sobre o git √© que voc√™ n√£o precisa se lembrar de controle de vers√£o no momento em que voc√™ faz o commit do c√≥digo. O que poderia acontecer se n√≥s estiv√©ssemos usando a linha de comando do sistema operacional ao inv√©s do comando git para mover arquivos?\nO pr√≥ximo set de comandos √© id√™ntico √†s nossas √∫ltimas a√ß√µes. √â necess√°rio mais trabalho para o mesmo resultado.\nN√≥s podemos fazer:\nmkdir lib mv hello.html lib git add lib/hello.html git rm hello.html Fa√ßa commit do novo diret√≥rio Vamos fazer commit dessa mudan√ßa.\ngit commit -m \u0026quot;Moved hello.html to lib\u0026quot;   21. Mais informa√ß√£o sobre a estrutura Adicionando index.html Vamos adicionar um arquivo index.html ao nosso reposit√≥rio. O arquivo a seguir √© perfeito para esse prop√≥sito.\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;iframe src=\u0026#34;lib/hello.html\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;200\u0026#34; /\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Adicione o arquivo e fa√ßa um commit.\ngit add index.html git commit -m \u0026quot;Added index.html.\u0026quot; Agora quando voc√™ abrir index.html, voc√™ dever√° ver uma parte da p√°gina hello em uma pequena janela.\n  firefox index.html 22. Dentro do Git: diret√≥rio .git O diret√≥rio .git Essa √© uma pasta especial onde todas as coisas do git est√£o. Vamos explorar o diret√≥rio.\n  Banco de Dados de Objetos ls -C .git/objects/\u0026lt;dir\u0026gt; Voc√™ deve ver v√°rias pastas nomeadas com dois caracteres. As duas primeiras letras do hash sha1 do objeto armazenado no git s√£o o nome dos seus diret√≥rios.\nVamos dar uma olhada em uma das pastas nomeadas com dois caracteres. Devem ter arquivos com nomes de 38 caracteres. Esses arquivos cont√©m os objetos armazenados no git. Eles s√£o comprimidos e encriptados, ent√£o √© imposs√≠vel ver seu conte√∫do diretamente. Vamos dar uma olhada melhor no diret√≥rio Git.\n  Arquivo Config cat .git/config   Branches e tags ls .git/refs ls .git/refs/heads ls .git/refs/tags cat .git/refs/tags/v1   Arquivos no subdiret√≥rio de tags devem ser familiares pra voc√™. Cada arquivo corresponde a tag anteriormente criada usando o comando git tag. Seu conte√∫do n√£o √© nada mais que um hash de um commit associado √† tag.\nA pasta heads √© quase id√™ntica e √© usada n√£o para tags, mas para branches. No momento, n√≥s s√≥ temos um branch e tudo que voc√™ v√™ nessa pasta √© um branch master.\nArquivo HEAD cat .git/HEAD   Existe uma refer√™ncia para o branch atual no arquivo HEAD. Nesse momento, ela tem que ser para o branch master.\n23. Dentro do Git: Trabalhando diretamente com objetos do git Procurando pelo √∫ltimo commit git hist --max-count=1   Exibi√ß√£o do √∫ltimo commit Com a hash SHA1, tal como acima\u0026hellip;\ngit cat-file -t \u0026lt;hash\u0026gt; git cat-file -p \u0026lt;hash\u0026gt;   Busca em √°rvore N√≥s podemos exibir a √°rvore referenciada no commit. Isso deveria ser uma descri√ß√£o do arquivo no nosso projeto (para um commit espec√≠fico). Use a hash SHA1 da string da √°rvore listada acima.\ngit cat-file -p \u0026lt;treehash\u0026gt;   Exibir diret√≥rio da lib e Exibir o arquivo hello.html git cat-file -p \u0026lt;libhash\u0026gt; git cat-file -p \u0026lt;hellohash\u0026gt;   E a√≠ est√°. Objetos √°rvores, objetos de commits e objetos blob s√£o exibidos diretamente do reposit√≥rio do git. E isso √© tudo que tem - √°rvores, blobs e commits.\nExplore voc√™ mesmo O reposit√≥rio git pode ser explorado manualmente. Tente achar manualmente o arquivo hello.html original do primeiro commit com ajuda da hash SHA1 referenciada no √∫ltimo commit.\n"
},
{
	"uri": "/artigos/",
	"title": "üìë Artigos",
	"tags": ["artigos", "articles"],
	"description": "Material coletado no dia a dia",
	"content": " Docker  Diversos artigos sobre docker\n Git  Diversos artigos sobre git\n Varios  Diversos\n "
},
{
	"uri": "/tutorials/git/git-part3/",
	"title": "Git (Parte 3)",
	"tags": ["git"],
	"description": "Tutorial de GIT",
	"content": " Este tutorial √© a continua√ß√£o do tutorial Git (Part 2)\n 24. Criando um Branch Vamos nomear o nosso novo branch como ¬´style¬ª.\ngit checkout -b style git status Nota:\n git checkout -b \u0026lt;branch name\u0026gt; √© o atalho de git branch \u0026lt;branch name\u0026gt; seguido por git checkout \u0026lt;branch name\u0026gt; Note que o comando git status avisa que voc√™ est√° no branch style.  Adicione o arquivo style.css touch lib/style.css Arquivo lib/style.css\nh1 { color: red; } Execute:\ngit add lib/style.css git commit -m \u0026#34;Added css stylesheet\u0026#34;   Mude a p√°gina principal Atualize o arquivo lib/hello.html para usar o style.css.\n\u0026lt;!-- Author: Juan Enciso (juan.enciso@gmail.com) --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link type=\u0026#34;text/css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;all\u0026#34; href=\u0026#34;style.css\u0026#34; /\u0026gt;  \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; git add lib/hello.html git commit -m \u0026quot;Hello uses style.css\u0026quot;   Mude o index.html Atualice o arquivo index.html para que ele use style.css\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link type=\u0026#34;text/css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;all\u0026#34; href=\u0026#34;lib/style.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt;  \u0026lt;body\u0026gt; \u0026lt;iframe src=\u0026#34;lib/hello.html\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;200\u0026#34; /\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; git add index.html git commit -m \u0026quot;Updated index.html\u0026quot;   25. Navegando em Branches Agora o seu projeto possui dois branches:\ngit hist --all   Trocando para o branch master git checkout master cat lib/hello.html   Vamos retornar para o branch do style. git checkout style cat lib/hello.html   26. Mudan√ßas no branch master Enquanto voc√™ est√° mudando o branch style, algu√©m decide mexer na branch master. Ele adicionou um arquivo README.md.\nCrie um arquivo README.md\n## Tutorial  This is the Hello World example from the git tutorial. Fa√ßa um commit das mudan√ßas do arquivo README no branch master.\ngit checkout master git add README.md git commit -m \u0026quot;Added README\u0026quot;   27. Visualizando os diferentes branches Agora n√≥s temos um reposit√≥rio com dois branches diferentes. Para ver branches e suas diferen√ßas, use o comando log como segue.\ngit hist --all   N√≥s temos a oportunidade de ver o --graph do git hist em a√ß√£o. Adicionando a op√ß√£o --graph ao git log faz com que ele crie uma √°rvore de commits com a ajuda de caracteres ASCII simples. N√≥s vemos ambos os branches (style e master) e que o branch atual √© o master HEAD. O arquivo index.html adicionado vai antes de ambos branches.\nA flag \u0026ndash;all garante que n√≥s vejamos todos os branches. Por padr√£o, apenas o branch atual √© mostrado.\n28. Merging Merging em um √∫nico branch Merge junta as modifica√ß√µes de dois branches em um. Vamos voltar para o branch style e fazer um merge dele com o master.\ngit checkout style git merge master git hist --all   Pelo merge periodico entre os branches master e style, voc√™ pode acompanhar quaisquer mudan√ßas ou modifica√ß√µes ocorridas para manter a compatibilidade das mudan√ßas de estilo na linha principal.\nPor√©m, isso faz com que os gr√°ficos de commits fiquem feios. Mais tarde vamos considerar a reloca√ß√£o como uma alternativa √† fus√£o.\n29. Criando um conflito Voltar para o master e criar o conflito Volte para o branch master e fa√ßa as seguintes altera√ß√µes:\ngit checkout master Arquivo lib/hello.html\n\u0026lt;!-- Author: Juan Enciso (juan.enciso@gmail.com) --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- no style --\u0026gt;  \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World! Life is great!\u0026lt;/h1\u0026gt;  \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; git add lib/hello.html git commit -m 'Life is great!' Visualize os branches\ngit hist --all   Depois de um commit \u0026ldquo;Added README\u0026rdquo; o branch master foi feito um merge com o branch style, mas existe um commit aditional do master, que n√£o foi feito um merge com o branch style.\nA √∫ltima modifica√ß√£o feita no master entra em conflito com algumas mudan√ßas do style. No pr√≥ximo passo n√≥s vamos resolver esse conflito.\n30. Resolvendo conflitos Fazer merge do branch master com o style git checkout style git merge master   A primeira se√ß√£o e a vers√£o do branch atual (style) head. A segunda se√ß√£o √© a vers√£o do branch master.\nResolu√ß√£o do conflito Voc√™ precisa resolver o conflito manualmente. Fa√ßa mudan√ßas no lib/hello.html para alcan√ßar o seguinte resultado.\n\u0026lt;!-- Author: Juan Enciso (juan.enciso@gmail.com) --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link type=\u0026#34;text/css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;all\u0026#34; href=\u0026#34;style.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World! Life is great!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Merging avan√ßado Git n√£o tem ferramentas gr√°ficas de merging, mas aceita qualquer ferramenta de merge produzida por terceiros. (leia mais sobre essas ferramentas no StackOverflow.)\n31. Realocating como uma alternativa √† merge Vamos olhar para as diferen√ßas entre realocating e merge. Para fazer isso, precisamos voltar no reposit√≥rio no momento antes do primeiro merge e ent√£o repetir os mesmos passos realocando ao inv√©s de fazer merge.\nN√≥s usaremos o comando reset para voltar o branch para um estado anterior.\n32. Resetando o branch style Vamos para o branch style no ponto antes de darmos merge com o branch master. Podemos resetar o branch para qualquer commit. Na verdade, isso faz com que o ponteiro do branch aponte para qualquer commit contido na √°rvore.\nAqui, queremos voltar no style branch para um ponto anterior ao merge com o master. Temos que encontrar o √∫ltimo commit antes do merge\ngit checkout style git hist   √â um pouco dif√≠cil de ler, mas podemos perceber pelos dados que o commit Updated index.html foi o √∫ltimo no branch style anterior ao merging. Vamos resetar o style branch para esse commit.\ngit reset --hard \u0026lt;hash\u0026gt; git hist --all   Agora no branch style n√£o existem commits de merge no nosso hist√≥rico.\n33. Reset do branch master Resetando branch master O modo interativo que adicionamos ao branch master se tornou uma mudan√ßa que conflita com as mudan√ßas do branch style. Vamos reverter as mudan√ßas do branch master para o ponto anterior √† mudan√ßa conflitante. Isso nos permite demonstrar o comando rebase sem nos preocupar com conflitos.\ngit checkout master git hist   O commit \u0026ldquo;Added README\u0026rdquo; est√° imediatamente antes do modo interativo conflitante ser adicionado. Agora precisamos resetar o branch master para o commit \u0026ldquo;Added README\u0026rdquo; .\ngit reset --hard \u0026lt;hash\u0026gt; git hist --all Examine o log. Ele deve parecer como se tiv√©ssemos retrocedido o reposit√≥rio para um ponto no tempo anterior a qualquer merge.\n  34. Rebase Ent√£o n√≥s voltamos no hist√≥rico at√© antes do primeiro merge e queremos realocar as mudan√ßas do master para o nosso branch style.\nDessa vez n√≥s vamos usar o comando rebase ao inv√©s do merge.\ngit checkout style git rebase master git hist   Merge VS Rebase O resultado do comando rebase parece muito com o do merge. O branch style atualmente cont√©m todas as suas mudan√ßas, al√©m das mudan√ßas do branch master. A √°rvore de commits, por√©m, est√° um pouco diferente. A √°rvore de commit do branch style foi reescrita para fazer o branch master parte do hist√≥rico de commits. Isso faz com que a cadeia de commits seja mais linear e leg√≠vel.\nQuando usar rebase, quando usar merge? N√£o use o comando rebase\u0026hellip;\n Se o branch √© p√∫blico e compartilhado. Reescrever tais branches vai atrapalhar o trabalho de outros colegas. Quando o hist√≥rico exato de commits do branch √© importante (porque o comando rebase reescreve o hist√≥rico de commits).  Dadas as recomenda√ß√µes acima, eu prefiro usar rebase para branches locais e de curto prazo e merge para branches em reposit√≥rios p√∫blicos.\n35. Merging com o branch master N√≥s mantivemos nosso branch style atualizado em rela√ß√£o ao branch master (usando rebase), mas agora vamos fazer merge das modifica√ß√µes de volta no master.\ngit checkout master git merge style J√° que o √∫ltimo commit do master √© anterior ao o √∫ltimo commit do branch style, o git consegue fundir em modo de avan√ßo r√°pido - simplesmente movendo o ponteiro do branch para frente, apontando para o mesmo commit que o branch style.\nConflitos n√£o surgem no fast-forward merge.\n  Confira os logs git hist   Agora o style e o master s√£o id√™nticos. Verifique:\ngit hist --all 36. Reposit√≥rios m√∫ltiplos At√© agora s√≥ trabalhamos com um reposit√≥rio git. Apesar disso, git √© √≥timo para trabalhar com v√°rios reposit√≥rios. Os reposit√≥rios adicionais podem ser armazenados localmente ou acessados por conex√£o de rede.\nNa pr√≥xima se√ß√£o iremos criar um novo reposit√≥rio chamado \u0026ldquo;cloned_hello\u0026rdquo;. N√≥s iremos discutir como mover mudan√ßas de um reposit√≥rio para o outro, lidando com conflitos que possam surgir.\nNOTA: N√≥s faremos mudan√ßas em ambas as c√≥pias do nosso reposit√≥rio. Preste aten√ß√£o no reposit√≥rio em que voc√™ est√° em cada est√°gio das pr√≥ximas li√ß√µes.\n37. Clonando reposit√≥rios Se voc√™ est√° trabalhando em grupo, √© importante que voc√™ entenda os pr√≥ximos 12 cap√≠tulos, porque voc√™ geralmente ter√° que trabalhar com reposit√≥rios clonados.\ncd .. pwd git clone hello cloned_hello ls -ld hello cloned_hello   38. Examine o reposit√≥rio clonado Visualizando o hist√≥rico do reposit√≥rio\ncd cloned_hello ls git hist --all   Voc√™ ver√° uma lista de todos os commits no novo reposit√≥rio, que deveriam ser iguais aos do reposit√≥rio original. A √∫nica diferen√ßa deveria ser o nome dos branches.\nBranches remotos Voc√™ ver√° um branch master (HEAD) no hist√≥rico. Voc√™ tamb√©m ver√° branches com nomes estranhos (origin/master, origin/style e origin/HEAD). N√≥s falaremos deles depois.\n39. O que √© origin? git remote git remote show origin   N√≥s podemos ver que o ‚Äúorigin‚Äù do reposit√≥rio remoto √© o reposit√≥rio hello original. Reposit√≥rios remotos s√£o tipicamente guardados em uma m√°quina separada ou em um servidor centralizado. Por√©m, como podemos ver, eles tamb√©m podem apontar para um reposit√≥rio na mesma m√°quina. N√£o tem nada especial sobre o nome ‚Äúorigin‚Äù, mas existe uma conven√ß√£o de us√°-lo para o reposit√≥rio prim√°rio central (se houver algum).\n40. Branches remotos Vamos dar uma olhada nos branches do nosso reposit√≥rio clonado.\ngit branch   Como podemos ver, apenas o branch master est√° listado. Onde est√° o branch style? git branch lista apenas os branches locais, por padr√£o.\nLista dos branches remotos Para ver todos os branches, use o seguinte comando:\ngit branch -a   O Git lista todos os commits do reposit√≥rio original, mas os branches do reposit√≥rio remoto n√£o s√£o tratados como os locais. Se n√≥s precisamos do nosso pr√≥prio branch style, teremos que cri√°-lo. Em um minuto voc√™ ver√° como isso √© feito.\n41. Mudando o reposit√≥rio original Fa√ßa uma mudan√ßa no reposit√≥rio original hello cd ../hello Fa√ßa as seguintes mudan√ßas no arquivo README:\n## Tutorial  This is the Hello World example from the git tutorial. (changed in original) Agora adicione e fa√ßa commit dessas mudan√ßas\ngit add README git commit -m \u0026quot;Changed README in original repo\u0026quot;   Agora o reposit√≥rio original tem mudan√ßas mais recentes que n√£o est√£o inclu√≠das na vers√£o clonada. Em seguida, vamos receber essas mudan√ßas no reposit√≥rio clonado.\n42. Trazendo modifica√ß√µes cd ../cloned_hello git fetch git hist --all   Neste momento, o reposit√≥rio cont√©m todos os commits do reposit√≥rio original. Por√©m, eles n√£o est√£o integrados com os branchs locais do reposit√≥rio clonado.\nVoc√™ vai ver o commit de nome ‚ÄúChanged README in original repo‚Äù no hist√≥rico. Perceba que o commit inclui ‚Äúorigin/master‚Äù e ‚Äúorigin/HEAD‚Äù.\nAgora vamos dar uma olhada no commit ‚ÄúUpdated index.html‚Äù. Voc√™ vai ver que o branch master local aponta para esse commit, n√£o para o commit que acabamos de trazer.\nIsso nos mostra que o comando ‚Äúgit fetch‚Äù vai trazer os novos commits do reposit√≥rio remoto, mas n√£o vai fundir eles com os branches locais.\nCheque o README N√≥s podemos mostrar que o arquivo README clonado n√£o foi modificado.\ncat README.md   43. Merging as modifica√ß√µes baixadas Fa√ßa merge das modifica√ß√µes baixadas no branch master local e agora voc√™ deve ver as modifica√ß√µes no arquivo README.md\ngit merge origin/master cat README.md   44. Fazendo pull e merge de modifica√ß√µes N√£o iremos passar por todo o processo de fazer e dar pull em uma mudan√ßa, mas queremos que voc√™s saibam que:\ngit pull √©, na verdade, equivalente a fazer os seguintes passos:\ngit fetch git merge origin/master 45. Adicionando um branch de rastreamento Branches que come√ßam com remotes/origin pertencem ao reposit√≥rio original. Perceba que, mesmo que voc√™ n√£o tenha mais o branch styles, ele sabe que o branch est√° no reposit√≥rio original.\nAdicione um branch local que rastreia um branch remoto. git branch --track style origin/style git branch -a git hist --max-count=2   46. Reposit√≥rios bare Reposit√≥rios bare (sem o diret√≥rio de trabalho) s√£o tipicamente usados para compartilhamento.\nCriando um reposit√≥rio bare cd .. git clone --bare hello hello.git ls -ld hello.git cd hello.git/ ls -l Tipicamente, reposit√≥rios terminados em .git s√£o bare. Como voc√™ pode ver, n√£o existe nenhum diret√≥rio de trabalho no reposit√≥rio hello.git. Na verdade, ele n√£o √© nada mais que o diret√≥rio .git de um reposit√≥rio que n√£o √© bare.\n  47. Adicionando um reposit√≥rio remoto Vamos adicionar o reposit√≥rio hello.git ao nosso reposit√≥rio original.\ncd .. cd hello git remote add shared ../hello.git   NOTA: N√≥s estamos agora no reposit√≥rio hello.\n48. Submetendo modifica√ß√µes A partir de um reposit√≥rio limpo, geralmente compartilhado em qualquer servidor de rede, precisamos enviar nossas modifica√ß√µes a outros reposit√≥rios. Comece criando uma modifica√ß√£o para ser enviada. Edite o arquivo README.md e fa√ßa um commit\n## Tutorial  This is the Hello World example from the git tutorial. (Changed in original and pushed to shared) git checkout master git add README git commit -m \u0026quot;Added shared comment to readme\u0026quot;   Agora envie as modifica√ß√µes para o reposit√≥rio compartilhado.\ngit push shared master O reposit√≥rio comum est√° recebendo nossas modifica√ß√µes enviadas. (Lembre-se, n√≥s adicionamos ele como um reposit√≥rio remoto na li√ß√£o anterior).\n  Nota: Tivemos que explicitamente especificar o branch master para submeter as mudan√ßas. Isso pode ser configurado automaticamente, mas eu sempre esque√ßo o comando. Para f√°cil administra√ß√£o de seus branches remotos mude para ¬´Git Remote Branch¬ª.\n49. Removendo modifica√ß√µes comuns Rapidamente mude para o reposit√≥rio clonado e extraia as modifica√ß√µes rec√©m enviadas ao reposit√≥rio comum.\ncd ../cloned_hello Nota: Estamos agora no reposit√≥rio cloned_hello.\nContinue com \u0026hellip;\ngit remote add shared ../hello.git git branch --track shared master git pull shared master cat README.md   50. Divulgando o seu reposit√≥rio Existem maneiras diferentes de compartilhar um reposit√≥rio git na rede. Essa √© a mais r√°pida.\nExecute git server cd .. git daemon --verbose --export-all --base-path=.   Agora, v√° ao seu diret√≥rio de trabalho num terminal separado.\ngit clone git://localhost/hello.git network_hello cd network_hello ls   Confira se seu vizinho usa git daemon. Troquem seus endere√ßos IP e depois confiram se voc√™s podem pegar as altera√ß√µes dos reposit√≥rios um do outro.\n"
},
{
	"uri": "/",
	"title": "Docs Planet",
	"tags": [],
	"description": "",
	"content": "Docs Planet O Docs Planet √© um repostitorio de conte√∫do de tutoriais sobre tecnologias usadas no mundo DevOps\n"
},
{
	"uri": "/tags/git/",
	"title": "git",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/articles/",
	"title": "articles",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/artigos/",
	"title": "artigos",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/azure/",
	"title": "azure",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/bash/",
	"title": "bash",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "Contribuidores do Developer Portal",
	"content": "Contribuidores Juan Enciso @jenciso\nMateus Abdala @MateusAbdala\n "
},
{
	"uri": "/artigos/docker/",
	"title": "Docker",
	"tags": ["docker"],
	"description": "Diversos artigos sobre docker",
	"content": "Docker Tutoriais  https://www.docker.com/101-tutorial https://docker-curriculum.com/ https://www.ionos.es/digitalguide/servidores/configuracion/tutorial-docker-instalacion-y-primeros-pasos/  "
},
{
	"uri": "/tags/docker/",
	"title": "docker",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/artigos/git/",
	"title": "Git",
	"tags": ["git"],
	"description": "Diversos artigos sobre git",
	"content": "Git Artigos  https://www.hostinger.com.br/tutoriais/git-branch/ https://www.xpertup.com/blog/technology/git-and-github-fundamentals/ https://dev.to/usmslm102/git-cheat-sheet-4f5a  Git Tutoriais  https://www.atlassian.com/git/tutorials https://try.github.io/ https://www.vogella.com/tutorials/Git/article.html  Git Merge  https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1  Gitflow  https://medium.com/@olivier.bossel/git-flow-the-right-way-to-go-f2a65c315818  "
},
{
	"uri": "/tutorials/git/gitflow/",
	"title": "Gitflow",
	"tags": ["gitflow"],
	"description": "Tutorial de Gitflow",
	"content": "Intro Gitflow \u0026hellip;\n"
},
{
	"uri": "/tags/gitflow/",
	"title": "gitflow",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/links/",
	"title": "links",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/tutoriais/",
	"title": "Tutoriais",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/artigos/cors/",
	"title": "Varios",
	"tags": ["links"],
	"description": "Diversos",
	"content": "CORS  https://dev.to/lydiahallie/cs-visualized-cors-5b8h  "
}]
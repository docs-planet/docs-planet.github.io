[
{
	"uri": "/tutorials/devopstools/",
	"title": "DevOps Tools",
	"tags": ["azure"],
	"description": "Conteudo relacionado a ferramenta Azure Devops",
	"content": "DevopsTools "
},
{
	"uri": "/tutorials/devopstools/git-part1/",
	"title": "Git (Parte 1)",
	"tags": ["git"],
	"description": "Tutorial de GIT",
	"content": " Este tutorial esta baseado do seguinte documento: https://githowto.com\n 1. Prerequisitos  Instalar git-bash-prompt seguindo este tutorial Ter uma estacao de trabalho Linux  2. Preparação Configurando nome e endereço de e-mail\ngit config --global user.name \u0026#34;Seu Nome Completo\u0026#34; git config --global user.email \u0026#34;seu_email@sua_empresa.com\u0026#34; Opções de Instalação: términos de linhas (Linux):\ngit config --global core.autocrlf input git config --global core.safecrlf warn   3. Criando o projeto git Vamos a criar um repositório git \u0026ldquo;hello\u0026rdquo; e uma página hello.html com o seguinte conteúdo: \u0026ldquo;Hello, World\u0026rdquo;\nCrie uma página de \u0026ldquo;Hello, World\u0026rdquo; e inicialize o repositório\nmkdir hello \u0026amp;\u0026amp; cd hello echo \u0026#34;Hello, World\u0026#34; \u0026gt; hello.html git init Adicione a página ao repositório:\ngit add hello.html git commit -m \u0026#34;First Commit\u0026#34;   4. Conferindo o status do repositório Use o comando git status para checar o estado atual do repositório.\ngit status   5. Fazendo modificações Modificar a página hello.html com o seguinte conteúdo:\n\u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; Conferindo o status:\ngit status   Notar que:\n O git sabe que o arquivo hello.html foi modificado, mas essas modificações ainda não sofreram commit para o repositório. A mensagem de status oferece dicas sobre o que fazer em seguida. Se você quiser adicionar essas modificações para o repositório, use git add. Para desfazer as modificações use git checkout.  6. Adicionando modificações ao stage Mande o git adicionar as modificações ao stage. Confira o status\ngit add hello.html git status   Observar:\n Modificações no hello.html foram adicionadas ao stage. Isso quer dizer que o git sabe da modificação, mas não é permanente no repositório. O próximo commit incluirá as modificações que estão no stage. Se você decidir não fazer commit da modificação, o comando status vai te lembrar que você pode usar o comando git reset para remover essas mudanças do stage.  7. Colocando em stage e fazendo commits Adicionar algo ao stage no git permite que você continue fazendo modificações no seu diretório de trabalho e, quando decidir que quer interagir com o controle de versão, permite que guarde as mudanças em pequenos commits.\nPense que você editou três arquivos (a. html, b. html e c. html). Depois disso você tem que fazer commit de todas as modificações para que as mudanças em a.html e b.html sejam um único commit, enquanto as mudanças em c.html, que não são lógicamente relacionadas com as duas outras mudanças nos outros dois arquivos, sejam enviadas em um commit diferente.\nEm teoria, você pode fazer o seguinte:\ngit add a.html git add b.html git commit -m \u0026#34;Changes for a and b\u0026#34; git add c.html git commit -m \u0026#34;Unrelated change to c\u0026#34; Separando a adição ao stage e o commit, você pode customizar o que vai em cada commit.\n8. Fazendo commit das modificações Na hora de executar o comando git commit vamos omitor o uso do flag -m, desta forma entramos na edição interativa de comentários para o commit. O git ira abrir o editor configurado a partir desta lista (em ordem de prioridade)\n Variável de ambiente GIT_EDITOR Definição de configuração core.editor Variável de ambiente VISUAL Variável de ambiente EDITOR  No me caso meu editor é \u0026lsquo;vi\u0026rsquo;. Caso deseje modificar seu editor de forma permanente, edite o arquivo ~/.gitconfig\nLogo de executar o commit, iremos colocar como comentario \u0026ldquo;Added h1 tag\u0026rdquo;\n  9. Modificações, não arquivos O git trabalha com as modificações, não com os arquivos.\n Primeira mudança: Adicionando tags padrão de páginas e executando git add hello.html. O novo conteúdo para o arquivo: hello.html será:  \u0026lt;html\u0026gt; \u0026lt;body\u0026gt;  \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; git add hello.html  Segunda mudança: Adicione os headers do HTML. Agora adicione os headers ( section) na página  \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt;  \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Agora excute:\ngit status   Note que o arquivo hello.html está listado duas vezes no status.\n A primeira mudança (a adição das tags padrão) está no stage e pronta para um commit. A segunda mudança (adição dos headers) não está no stage.  Se você fizesse um commit agora, os headers não teriam sido salvos no repositório.\n Commit: Faça um commit das mudanças que estão no stage (as tags padrão) e então confira novamente o status.  git commit -m \u0026#34;Added standard HTML page tags\u0026#34; git status   O comando status diz que o arquivo hello.html tem modificações não gravadas, mas não está mais em buffer.\n Adicionando a segunda modificação: Adicione a segunda modificação ao stage, depois execute o comando git status  git add . git status git commit -m \u0026#34;Added HTML header\u0026#34;   10. Histórico Usaremos o comando git log\ngit log   Histórico em uma linha:\ngit log --pretty=oneline Controlando a exibição de entradas\ngit log --pretty=oneline --max-count=2 git log --pretty=oneline --since='5 minutes ago' git log --pretty=oneline --until='5 minutes ago' git log --pretty=oneline --author=\u0026lt;your name\u0026gt; git log --pretty=oneline --all Para rever as modificações feitas na última semana\ngit log --all --pretty=format:\u0026quot;%h %cd %s (%an)\u0026quot; --since='7 days ago' Um formato bacana\ngit log --pretty=format:\u0026quot;%h %ad | %s%d [%an]\u0026quot; --graph --date=short   Vamos olhar os detalhes:\n \u0026ndash;pretty=\u0026rdquo;\u0026hellip;\u0026rdquo; define o formato da saída %h é o hash abreviado do commit %d mostra decorações do commit (ex.: head de branches ou tags) %ad é a data do commit %s é o comentário %an é o nome do autor = \u0026ndash;graph fala para o git mostrar a árvore de commits no formato de um gráfico de ASCII \u0026ndash;date=short mantém o formato de data pequeno e simples  Então, toda vez que você quiser ver um log, você terá que digitar muito. Felizmente, nós aprenderemos sobre aliases na próxima lição.\n11. Aliases Adicione as seguintes linhas no arquivo ~/.gitconfig\n[alias] co = checkout ci = commit st = status br = branch hist = log --pretty=format:\\\u0026quot;%h %ad | %s%d [%an]\\\u0026quot; --graph --date=short type = cat-file -t dump = cat-file -p Agora execute:\ngit st git hist   12. Usando versões anteriores Conseguindo os hashes das versões anteriores git hist O resultado será:\n  Confira a data do log e encontre o hash do primeiro commit. Você vai achar ele na última linha do git hist Use o código (os seus 7 primeiros caracteres são suficientes) no comando abaixo. Depois disso, cheque o conteúdo do arquivo hello.html.\ngit checkout \u0026lt;hash\u0026gt; cat hello.html   Voltando para a versão mais atual no branch master git checkout master cat hello.html   ‘master’ é o nome do branch padrão. Ao entrar em um branch pelo seu nome, você vai para a sua versão mais atual.\n13. Adicionando tags a versões Vamos chamar a versão atual do nosso programa \u0026ldquo;Hello\u0026rdquo; de versão 1 (v1).\nCriando a tag do primeiro git tag v1 Tags em versões antigas Vamos adicionar uma tag à versão anterior da nossa atual versão com o nome v1-beta. Nós vamos usar a notação ^ indicando “o pai de v1”. Se a notação v1^ gera problemas, tente usar v1~1 para referenciar a mesma versão. Essa notação significa “a primeira versão antes de v1”.\ngit checkout v1^ cat hello.html   Essa é a versão com as tags \u0026lt;html\u0026gt; e \u0026lt;body\u0026gt;, mas sem \u0026lt;head\u0026gt;. Vamos fazer dessa a versão v1-beta.\ngit tag v1-beta Acessando através do nome da tag git checkout v1 git checkout v1-beta   Vendo tags com o comando tag git tag Vendo tags nos logs git hist master --all   Você pode ver as tags (v1 e v1-beta) listadas no log juntamente com o nome do branch (master). O HEAD mostra o commit em que você está atualmente (v1-beta).\n"
},
{
	"uri": "/docs/",
	"title": "Docs",
	"tags": ["docs", "documentation"],
	"description": "Conceitos, apresentações, conteúdo em geral",
	"content": " "
},
{
	"uri": "/tutorials/devopstools/git-part2/",
	"title": "Git (Parte 2)",
	"tags": ["git"],
	"description": "Tutorial de GIT",
	"content": " Este tutorial é a continuação do tutorial Git (Part 1)\n 14. Descartando mudanças locais (antes do stage) Acessando o branch Master Verifique que você esta no último commit do branch master antes de continuar.\ngit checkout master Mude o hello.html Acontece de você modificar o arquivo no seu diretório de trabalho local e às vezes querer descartar as mudanças que você fez commit. É aqui que o comando checkout vai te ajudar.\nFaça mudanças ao arquivo hello.html na forma de um comentário indesejado.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;!-- This is a bad comment. We want to revert it. --\u0026gt;  \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Confira o status\ngit status   Desfazendo as mudanças no diretório de trabalho cat hello.html git checkout hello.html git status cat hello.html   O comando status mostra que não existem mudanças que não estão no stage no repositório de trabalho. E o “comentário ruim” não está mais no arquivo.\n15. Descartando mudanças no stage (antes do commit) Edite o arquivo e adicione as mudanças ao stage Faça mudanças ao arquivo hello.html na forma de um comentário indesejado.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- This is an unwanted but staged comment --\u0026gt;  \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; E logo adicione o arquivo ao stage.\ngit add hello.html git status   Revertendo a zona de buffer Felizmente, o status informado nos mostra exatamente o que devemos fazer para cancelar mudanças no stage.\ngit reset HEAD hello.html   O comando reset retorna a zona do buffer para HEAD. Isso limpa a zona do buffer das mudanças que nós acabamos de adicionar ao stage.\nO comando reset (padrão) não altera o diretório de trabalho. Logo, o diretório de trabalho ainda tem os comentários indesejados. Nós podemos usar o comando checkout do tutorial anterior para remover as mudanças do repositório de trabalho.\nMudando para a versão do commit git checkout hello.html git status   Nosso diretório de trabalho está limpo novamente.\n16. Desfazendo commits Algumas vezes você percebe que os novos commits estão errados e você quer desfazê-los. Existem várias maneiras de resolver esse problema, mas nós usamos a mais segura aqui.\nPara desfazer o commit, vamos criar um novo commit desfazendo as modificações não desejadas.\nEdite o arquivo e faça um commit Substitua o arquivo hello.html com o seguinte.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;!-- This is an unwanted but committed change --\u0026gt;  \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; git add hello.html git commit -m \u0026quot;Oops, we didn't want this commit\u0026quot; Faça um commit com as novas modificações que desfazem as modificações anteriores Para desfazer o commit, precisamos criar um commit que deleta as modificações feitas pelo commit indesejado.\ngit revert HEAD   Voce tb poderia haver usado o comando git revert HEAD --no-edit. O comando --no-edit pode ser ignorado. Ele era desnecessário para gerar as informações de saída sem abrir o editor.\nConfira o log git hist   A seguir vamos olhar a técnica que pode ser usada para remover o último commit do histórico do repositório.\n17. Removendo um commit de um branch Revert é um comando poderoso da seção anterior que te permite cancelar quaisquer commits para um repositório. Apesar disso, tanto os commits originais quanto os cancelados permanecem visíveis no histórico do branch (quando usamos o comando git log).\nFrequentemente depois que um commit é feito percebemos que ele era um erro. Seria legal ter um comando de desfazer que permitisse deletar o commit incorreto imediatamente. Esse comando preveniria a aparição de um commit indesejado no histórico do git log.\nO comando reset Nós já usamos o comando reset para equiparar o buffer zone e o commit selecionado (commit HEAD foi usado na lição anterior).\nQuando uma referência a um commit é dada (Exemplo: um branch, hash, ou tag name), o comando reset vai\u0026hellip;\n Sobrescrever o branch atual para que ele aponte para o commit correto Opcionalmente resetar o buffer zone para que ele satisfazer o commit especificado Opcionalmente resetar o dirétorio de trabalho para que ele equipare-se ao commit especificado  Cheque nosso histórico git hist   Nós vemos que os dois últimos commits desse branch são \u0026ldquo;Oops\u0026rdquo; and \u0026ldquo;Revert Oops\u0026rdquo;. Vamos removê-los com o comando reset.\nMarque esse branch primeiro Vamos marcar nosso último commit com tag, para que possamos achá-lo após remover commits.\ngit tag oops Resete o commit para o Oops anterior No log de histórico (veja acima), o commit com tag «v1» está fazendo commit sobre um commit anterior incorreto. Vamos resetar o branch para aquele ponto. Como o branch tem uma tag, podemos usar o nome da tag no comando reset (se não possuir uma tag, podemos usar o valor hash).\ngit reset --hard v1 git hist   Nada é perdido para sempre O que acontece com os commits errados? Eles ainda estão no repositório. Na verdade, ainda podemos nos referir a eles. No início da lição, criamos a tag «oops» para o commit cancelado. Vamos dar uma olhada em all (todos) commits.\ngit hist --all   Podemos ver que os commits errados não foram embora. Eles não estão listados mais no branch master mas ainda permanecem no repositório. Eles ainda estariam no repositório caso não tivéssemos colocado uma tag neles, mas só poderíamos referenciá-los por seus nomes hash. Commits não referenciados continuam no repositório até que um software garbage collection é acionado pelo sistema.\nPerigos de resetar Resets em branches locais geralmente são inofensivos. As consequências de quaisquer \u0026ldquo;acidentes\u0026rdquo; podem ser revertidos usando um commit apropriado.\nApesar disso, outros usuários que compartilham o branch podem ficar confusos se o branch compartilhado fica armazenado em repositórios remotos.\n18. Removendo a tag oops A tag oops já fez o seu trabalho. Vamos removê-la e permitir que o garbage collector delete o commit referenciado.\ngit tag -d oops git hist --all   19. Mudando commits Mude a página e faça um commit Coloque um comentário de autor na página.\n\u0026lt;!-- Author: Juan Enciso --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; git add hello.html git commit -m \u0026quot;Add an author comment\u0026quot; Oops\u0026hellip; precisa do e-mail Depois de fazer o commit, você percebe que todo bom comentário deveria incluir o e-mail do autor. Edite a página hello para fornecer um e-mail.\n\u0026lt;!-- Author: Juan Enciso (juan.enciso@gmail.com) --\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, World!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Mude o commit anterior Nós não queremos criar outro commit apenas para o e-mail. Vamos mudar o commit anterior e adicionar o endereço de e-mail.\ngit add hello.html git commit --amend -m \u0026quot;Add an author/email comment\u0026quot;   Olhar o histórico git hist   O novo commit \u0026ldquo;author/email\u0026rdquo; substitui o commit original \u0026ldquo;author\u0026rdquo;. O mesmo pode ser obtido usando o comando reset no branch e fazendo novamente o commit com as mudanças.\n20. Movendo arquivos Mova o arquivo hello.html para a pasta lib. Agora criaremos a estrutura do nosso repositório. Vamos mover a página no diretório lib\nmkdir lib git mv hello.html lib git status Movendo arquivos com git, nós notificamos o git sobre duas coisas\n O arquivo hello.html foi deletado. O arquivo lib/hello.html foi criado.  Ambos os fatos vão para stage imediatamente e ficam prontos para o commit. O comando git status reporta que o arquivo foi movido.\nMais um jeito de mover arquivos Um fato positivo sobre o git é que você não precisa se lembrar de controle de versão no momento em que você faz o commit do código. O que poderia acontecer se nós estivéssemos usando a linha de comando do sistema operacional ao invés do comando git para mover arquivos?\nO próximo set de comandos é idêntico às nossas últimas ações. É necessário mais trabalho para o mesmo resultado.\nNós podemos fazer:\nmkdir lib mv hello.html lib git add lib/hello.html git rm hello.html Faça commit do novo diretório Vamos fazer commit dessa mudança.\ngit commit -m \u0026quot;Moved hello.html to lib\u0026quot;   21. Mais informação sobre a estrutura Adicionando index.html Vamos adicionar um arquivo index.html ao nosso repositório. O arquivo a seguir é perfeito para esse propósito.\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;iframe src=\u0026#34;lib/hello.html\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;200\u0026#34; /\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Adicione o arquivo e faça um commit.\ngit add index.html git commit -m \u0026quot;Added index.html.\u0026quot; Agora quando você abrir index.html, você deverá ver uma parte da página hello em uma pequena janela.\n  firefox index.html 22. Dentro do Git: diretório .git O diretório .git Essa é uma pasta especial onde todas as coisas do git estão. Vamos explorar o diretório.\n  Banco de Dados de Objetos ls -C .git/objects/\u0026lt;dir\u0026gt; Você deve ver várias pastas nomeadas com dois caracteres. As duas primeiras letras do hash sha1 do objeto armazenado no git são o nome dos seus diretórios.\nVamos dar uma olhada em uma das pastas nomeadas com dois caracteres. Devem ter arquivos com nomes de 38 caracteres. Esses arquivos contém os objetos armazenados no git. Eles são comprimidos e encriptados, então é impossível ver seu conteúdo diretamente. Vamos dar uma olhada melhor no diretório Git.\n  Arquivo Config cat .git/config   Branches e tags ls .git/refs ls .git/refs/heads ls .git/refs/tags cat .git/refs/tags/v1   Arquivos no subdiretório de tags devem ser familiares pra você. Cada arquivo corresponde a tag anteriormente criada usando o comando git tag. Seu conteúdo não é nada mais que um hash de um commit associado à tag.\nA pasta heads é quase idêntica e é usada não para tags, mas para branches. No momento, nós só temos um branch e tudo que você vê nessa pasta é um branch master.\nArquivo HEAD cat .git/HEAD   Existe uma referência para o branch atual no arquivo HEAD. Nesse momento, ela tem que ser para o branch master.\n23. Dentro do Git: Trabalhando diretamente com objetos do git Procurando pelo último commit git hist --max-count=1   Exibição do último commit Com a hash SHA1, tal como acima\u0026hellip;\ngit cat-file -t \u0026lt;hash\u0026gt; git cat-file -p \u0026lt;hash\u0026gt;   Busca em árvore Nós podemos exibir a árvore referenciada no commit. Isso deveria ser uma descrição do arquivo no nosso projeto (para um commit específico). Use a hash SHA1 da string da árvore listada acima.\ngit cat-file -p \u0026lt;treehash\u0026gt;   Exibir diretório da lib e Exibir o arquivo hello.html git cat-file -p \u0026lt;libhash\u0026gt; git cat-file -p \u0026lt;hellohash\u0026gt;   E aí está. Objetos árvores, objetos de commits e objetos blob são exibidos diretamente do repositório do git. E isso é tudo que tem - árvores, blobs e commits.\nExplore você mesmo O repositório git pode ser explorado manualmente. Tente achar manualmente o arquivo hello.html original do primeiro commit com ajuda da hash SHA1 referenciada no último commit.\n24. Criando um Branch "
},
{
	"uri": "/tutorials/",
	"title": "💻 Tutoriais",
	"tags": ["Tutoriais"],
	"description": "Tutoriais diversos",
	"content": " DevOps Tools  Conteudo relacionado a ferramenta Azure Devops\n "
},
{
	"uri": "/artigos/",
	"title": "📑 Artigos",
	"tags": ["artigos", "articles"],
	"description": "Material coletado no dia a dia",
	"content": " "
},
{
	"uri": "/",
	"title": "Docs Planet",
	"tags": [],
	"description": "",
	"content": "Docs Planet O Docs Planet é um repostitorio de conteúdo de tutoriais sobre tecnologias usadas no mundo DevOps\n"
},
{
	"uri": "/tags/git/",
	"title": "git",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/articles/",
	"title": "articles",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/artigos/",
	"title": "artigos",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/azure/",
	"title": "azure",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "Contribuidores do Developer Portal",
	"content": "Contribuidores Juan Enciso @jenciso\nMateus Abdala @MateusAbdala\n "
},
{
	"uri": "/tags/docs/",
	"title": "docs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/documentation/",
	"title": "documentation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tutorials/devopstools/git-bash-prompt/",
	"title": "Git bash prompt",
	"tags": ["git"],
	"description": "Instalando um git-bash-prompt para melhorar nossa visibilidade no git",
	"content": "Intro Para ter uma melhor visibilidade do que passa em nossos projetos que estão versionados quando estamos trabalhando de forma local, podemos usar ferramentas como é o caso de git-bash-prompt\nInstalação Baixar o repositorio contendo o software\ncd ~ git clone https://github.com/jenciso/bash-git-prompt.git .bash-git-prompt --depth=1 Adicionar algumas linhas dentro do arquivo .bashrc\nGIT_PROMPT_ONLY_IN_REPO=0 GIT_PROMPT_THEME=Single_line_Minimalist source ~/.bash-git-prompt/gitprompt.sh    Testando Baixar qualquer repositorio git. Ex: https://github.com/jenciso/node-express-azure e fazemos uma simples modificação\ngit clone https://github.com/jenciso/node-express-azure cd node-express-azure rm README.md Agora podemos ver que estamos na branch master e o shell nos indica que temos um cambio em nosso repositorio.\n   "
},
{
	"uri": "/tags/tutoriais/",
	"title": "Tutoriais",
	"tags": [],
	"description": "",
	"content": ""
}]